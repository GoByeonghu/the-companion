from datetime import datetime

def get_weekday(timestamp):
    """
    주어진 타임스탬프로부터 요일을 반환하는 함수
    0: 월요일, 1: 화요일, ..., 6: 일요일
    """
    return datetime.fromtimestamp(timestamp).weekday()

def extract_movement_patterns(movement_graph):
    # 요일별 이동경로 데이터 저장을 위한 딕셔너리
    patterns = {}

    for vertex in movement_graph.values():
        timestamp = vertex["timestamp"]
        coordinates = (vertex["latitude"], vertex["longitude"])
        weekday = get_weekday(timestamp)

        if weekday not in patterns:
            patterns[weekday] = {
                "start_vertex": None,
                "end_vertex": None,
                "coordinates_sum": [0, 0],  # 좌표의 합을 저장하기 위한 리스트 [latitude_sum, longitude_sum]
                "count": 0  # 좌표의 개수를 저장하기 위한 카운터
            }

        # 출발지와 도착지 판단
        if vertex["state"] == "정지":
            if patterns[weekday]["start_vertex"] is None or timestamp < patterns[weekday]["start_vertex"]["timestamp"]:
                patterns[weekday]["start_vertex"] = vertex
            if patterns[weekday]["end_vertex"] is None or timestamp > patterns[weekday]["end_vertex"]["timestamp"]:
                patterns[weekday]["end_vertex"] = vertex

        # 좌표의 합과 개수 누적
        patterns[weekday]["coordinates_sum"][0] += coordinates[0]
        patterns[weekday]["coordinates_sum"][1] += coordinates[1]
        patterns[weekday]["count"] += 1

    # 대표 이동경로 패턴 도출
    representative_patterns = {}
    for weekday, pattern in patterns.items():
        start_vertex = pattern["start_vertex"]
        end_vertex = pattern["end_vertex"]
        coordinates_avg = [
            pattern["coordinates_sum"][0] / pattern["count"],
            pattern["coordinates_sum"][1] / pattern["count"]
        ]

        representative_patterns[weekday] = {
            "start_vertex": start_vertex,
            "end_vertex": end_vertex,
            "coordinates_avg": coordinates_avg
        }

    return representative_patterns
